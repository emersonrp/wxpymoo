
def fansi_replace(line):
    return line.translate(fansi_oem_to_utf8)

### FANSI Replacement tables
fansi_oem_to_utf8 = str.maketrans({
      1: "☺",
      3: "♥",
      4: "♦",
      5: "♣",
      6: "♠",
     14: "♫",
     15: "☼",
     16: "►",
     17: "◄",
     18: "↕",
     19: "‼",
     20: "¶",
     21: "§",
     22: "‗",
     23: "↨",
     24: "↑",
     25: "↓",
     26: "→",
     28: "∟",
     29: "↔",
     30: "▲",
     31: "▼",
    127: "⌂",
    128: "Ç",
    129: "ü",
    130: "é",
    131: "â",
    132: "ä",
    133: "à",
    134: "å",
    135: "ç",
    136: "ê",
    137: "ë",
    138: "è",
    139: "ï",
    140: "î",
    141: "ì",
    142: "Ä",
    143: "Å",
    144: "É",
    145: "æ",
    146: "Æ",
    147: "ô",
    148: "ö",
    149: "ò",
    150: "û",
    151: "ù",
    152: "ÿ",
    153: "Ö",
    154: "Ü",
    155: "¢",
    156: "£",
    157: "¥",
    158: "₧",
    159: "ƒ",
    160: "á",
    161: "í",
    162: "ó",
    163: "ú",
    164: "ñ",
    165: "Ñ",
    166: "ª",
    167: "º",
    168: "¿",
    169: "⌐",
    170: "¬",
    171: "½",
    172: "¼",
    173: "¡",
    174: "«",
    175: "»",
    176: "░",
    177: "▒",
    178: "▓",
    179: "│",
    180: "┤",
    181: "╡",
    182: "╢",
    183: "╖",
    184: "╕",
    185: "╣",
    186: "║",
    187: "╗",
    188: "╝",
    189: "╜",
    190: "╛",
    191: "┐",
    192: "└",
    193: "┴",
    194: "┬",
    195: "├",
    196: "─",
    197: "┼",
    198: "╞",
    199: "╟",
    200: "╚",
    201: "╔",
    202: "╩",
    203: "╦",
    204: "╠",
    205: "═",
    206: "╬",
    207: "╧",
    208: "╨",
    209: "╤",
    210: "╥",
    211: "╙",
    212: "╘",
    213: "╒",
    214: "╓",
    215: "╫",
    216: "╪",
    217: "┘",
    218: "┌",
    219: "█",
    220: "▄",
    221: "▌",
    222: "▐",
    223: "▀",
    224: "α",
    225: "β",
    226: "Γ",
    227: "π",
    228: "Σ",
    229: "δ",
    230: "μ",
    231: "τ",
    232: "Ф",
    233: "θ",
    234: "Ω",
    235: "δ",
    236: "∞",
    237: "ø",
    238: "Є",
    239: "∩",
    240: "≡",
    241: "±",
    242: "≥",
    243: "≤",
    244: "⌠",
    245: "⌡",
    246: "÷",
    247: "≈",
    248: "º",
    249: "•",
    250: "·",
    251: "√",
    252: "ⁿ",
    253: "²",
    254: "■",
})

# TODO -- should we dig through the user's chosen font to decide whether we support ANSI / latin1?
fansi_oem_to_ascii  = str.maketrans({
    1: 111,
    3: 86,
    4: 120,
    5: 37,
    6: 43,
    14: 47,
    15: 79,
    16: 62,
    17: 60,
    18: 124,
    19: 33,
    20: 124,
    21: 36,
    22: 95,
    23: 124,
    24: 94,
    25: 118,
    26: 62,
    28: 95,
    29: 45,
    30: 94,
    31: 118,
    127: 94,
    128: 67,
    129: 117,
    130: 101,
    131: 97,
    132: 97,
    133: 97,
    134: 97,
    135: 99,
    136: 101,
    137: 101,
    138: 101,
    139: 105,
    140: 105,
    141: 105,
    142: 97,
    143: 65,
    144: 69,
    145: 97,
    146: 65,
    147: 111,
    148: 111,
    149: 111,
    150: 117,
    151: 117,
    152: 121,
    153: 79,
    154: 85,
    155: 99,
    156: 76,
    157: 89,
    158: 80,
    159: 102,
    160: 97,
    161: 105,
    162: 111,
    163: 117,
    164: 110,
    165: 78,
    166: 97,
    167: 111,
    168: 63,
    169: 95,
    170: 95,
    171: 37,
    172: 37,
    173: 33,
    174: 60,
    175: 62,
    176: 37,
    177: 35,
    178: 64,
    179: 124,
    180: 124,
    181: 124,
    182: 124,
    183: 110,
    184: 61,
    185: 124,
    186: 124,
    187: 61,
    188: 61,
    189: 124,
    190: 124,
    191: 45,
    192: 124,
    193: 61,
    194: 61,
    195: 124,
    196: 45,
    197: 43,
    198: 124,
    199: 124,
    200: 61,
    201: 61,
    202: 61,
    203: 61,
    204: 61,
    205: 61,
    206: 43,
    207: 61,
    208: 124,
    209: 61,
    210: 45,
    211: 117,
    212: 61,
    213: 102,
    214: 110,
    215: 124,
    216: 43,
    217: 124,
    218: 43,
    219: 35,
    220: 95,
    221: 124,
    222: 124,
    223: 126,
    224: 97,
    225: 66,
    226: 114,
    227: 110,
    228: 69,
    229: 111,
    230: 117,
    231: 114,
    232: 111,
    233: 48,
    234: 79,
    235: 111,
    236: 56,
    237: 111,
    238: 69,
    239: 110,
    240: 69,
    241: 43,
    242: 62,
    243: 60,
    244: 124,
    245: 74,
    246: 37,
    247: 126,
    248: 111,
    249: 46,
    250: 46,
    251: 118,
    252: 110,
    253: 50,
    254: 35,
})
fansi_oem_to_latin1 = str.maketrans({
    1: 210,
    3: 86,
    4: 215,
    5: 41,
    6: 254,
    14: 47,
    15: 164,
    16: 62,
    17: 60,
    18: 124,
    19: 161,
    20: 182,
    21: 167,
    22: 150,
    23: 124,
    24: 94,
    25: 118,
    26: 62,
    28: 95,
    29: 45,
    30: 94,
    31: 118,
    127: 127,
    128: 199,
    129: 252,
    130: 233,
    131: 226,
    132: 228,
    133: 224,
    134: 229,
    135: 231,
    136: 234,
    137: 235,
    138: 232,
    139: 239,
    140: 238,
    141: 236,
    142: 196,
    143: 197,
    144: 201,
    145: 230,
    146: 198,
    147: 244,
    148: 246,
    149: 242,
    150: 251,
    151: 249,
    152: 121,
    153: 214,
    154: 220,
    155: 162,
    156: 163,
    157: 165,
    158: 80,
    159: 131,
    160: 225,
    161: 237,
    162: 243,
    163: 250,
    164: 241,
    165: 209,
    166: 170,
    167: 186,
    168: 191,
    169: 95,
    170: 172,
    171: 189,
    172: 188,
    173: 161,
    174: 171,
    175: 187,
    176: 41,
    177: 35,
    178: 64,
    179: 124,
    180: 124,
    181: 124,
    182: 124,
    183: 43,
    184: 61,
    185: 124,
    186: 124,
    187: 61,
    188: 61,
    189: 124,
    190: 124,
    191: 172,
    192: 124,
    193: 61,
    194: 61,
    195: 124,
    196: 151,
    197: 43,
    198: 124,
    199: 124,
    200: 61,
    201: 61,
    202: 61,
    203: 61,
    204: 61,
    205: 61,
    206: 43,
    207: 61,
    208: 124,
    209: 61,
    210: 45,
    211: 117,
    212: 61,
    213: 43,
    214: 110,
    215: 124,
    216: 135,
    217: 124,
    218: 43,
    219: 35,
    220: 95,
    221: 124,
    222: 124,
    223: 45,
    224: 97,
    225: 223,
    226: 114,
    227: 182,
    228: 128,
    229: 240,
    230: 181,
    231: 114,
    232: 135,
    233: 216,
    234: 79,
    235: 240,
    236: 156,
    237: 248,
    238: 128,
    239: 110,
    240: 69,
    241: 177,
    242: 187,
    243: 171,
    244: 124,
    245: 124,
    246: 247,
    247: 126,
    248: 176,
    249: 149,
    250: 183,
    251: 118,
    252: 110,
    253: 178,
    254: 149,
})


def ansi_test_contents():
    test = ''

    test += "\n"
    test += "--- ANSI TEST BEGIN ---\n"
    test += "System Colors:\n"

    fg_cube = bg_cube = ''

    for c in range(0,8):
        fg_cube += "\033[3" + str(c) + "m*\033[0m"
        bg_cube += "\033[4" + str(c) + "m \033[0m"
    test += fg_cube + "    " + bg_cube + "\n"
    fg_cube = bg_cube = ''

    test += "\n"
    test += "Color cube, 6x6x6\n"
    for g in range(0,6):
        for b in range(0,6):
            for r in range(0,6):
                c = ((r * 36) + (g * 6) + b) + 16
                fg_cube += "\033[38;5;" + str(c) + "m*\033[0m"
                bg_cube += "\033[48;5;" + str(c) + "m \033[0m"
        test += fg_cube + "    " + bg_cube + "\n"
        fg_cube = bg_cube = ''

    test += "\n"
    test += "Greyscale ramp:\n"
    for c in range(232,255):
        fg_cube += "\033[38;5;" + str(c) + "m*\033[0m"
        bg_cube += "\033[48;5;" + str(c) + "m \033[0m"
    test += fg_cube + "    " + bg_cube + "\n"
    fg_cube = bg_cube = ''

    test += "\n"
    test += "Some random 24-bit color samples:\n"
    from random import randint
    line = ""
    for i in range(0,6):
        for j in range(0,6):
            r = randint(0,255)
            g = randint(0,255)
            b = randint(0,255)
            fg_bg = 48 if (j % 2) else 38

            line += "\033[" + ("%d;2;%d;%d;%dm (%3d,%3d,%3d) " % (fg_bg, r, g, b, r, g, b)) + "\033[0m"
        test += line + "\n"
        line = ""

    test += "\n"
    test += "Non-color ANSI codes (* = not yet supported):\n"
    test += "This text should be " + "\033[1m"  + "bright" + "\033[22m.\n"
    test += "This text should be " + "\033[2m"  + "dim" + "\033[22m.\n"
    test += "This text should be " + "\033[3m"  + "italic" + "\033[23m.\n"
    test += "This text should be " + "\033[4m"  + "underlined" + "\033[24m.\n"
    test += "This text should " + "\033[5m"  + "blink" + "\033[25m.\n"
    test += "This text should " + "\033[6m"  + "fast-blink" + "\033[25m.\n"
    test += "This text should be " + "\033[7m"  + "inverse" + "\033[0m.\n"
    test += "This text should be concealed (select to see): \033[8m"  +  "OHAI!" + "\033[28m.\n"
    test += "This text should be " + "\033[9m"  + "strikethrough" + "\033[29m.\n"
    test += "This text should be " + "\033[21m" + "double-underlined*" + "\033[0m.\n"
    test += "This text should be " + "\033[51m" + "framed*" + "\033[54m.\n"
    test += "This text should be " + "\033[52m" + "encircled*" + "\033[54m.\n"
    test += "This text should be " + "\033[53m" + "overline*" + "\033[55m.\n"

    test += "\n"
    test += "--- ANSI TEST END ---\n"
    test += "\n"

    return test
